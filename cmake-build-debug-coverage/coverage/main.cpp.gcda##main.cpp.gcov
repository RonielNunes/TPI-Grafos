        -:    0:Source:C:/Users/Roniel Nunes/Desktop/Sexto Periodo/CCF 331 - Teoria e Modelo de Grafos/Trabalho pratico/TPI/main.cpp
        -:    0:Graph:C:\Users\Roniel Nunes\Desktop\Sexto Periodo\CCF 331 - Teoria e Modelo de Grafos\Trabalho pratico\TPI\cmake-build-debug-coverage\CMakeFiles\TPI.dir\main.cpp.gcno
        -:    0:Data:C:\Users\Roniel Nunes\Desktop\Sexto Periodo\CCF 331 - Teoria e Modelo de Grafos\Trabalho pratico\TPI\cmake-build-debug-coverage\CMakeFiles\TPI.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "headers/EstruturaLista.hpp"
        -:    2:#include <cstring>
        -:    3:
        1:    4:int main() {
        1:    4-block  0
        -:    5:    //DECLARACAO VARIÁVEIS
        -:    6:    FILE *arquivo; //Ponteiro para o tipo arquivo
        -:    7:    int n, aresta1,aresta2,vertice,verticeLido;
        1:    8:    int ordem,tamanho, quantidadeArestas = 0, grau, ncomponentes,arestaR1,arestaR2,arestaR1Lido,arestaR2Lido;
        -:    9:    float peso;
        1:   10:    char nomeArquivoEntrada[20],nomeArquivoSaida[20],nomeArquivo[20] = " ";
        -:   11:    Grafo *grafo;
        -:   12:
        -:   13:
        -:   14:    //LEITURA DO NOME DO ARQUIVO DE ENTRADA
        1:   15:    cout << endl;
        1:   15-block  0
        1:   16:    cout << "**********************GRAFOS LISTA DE ADJACENCIA*******************************" << endl;
        1:   16-block  0
        1:   16-block  1
        1:   17:    cout << "* Digite o nome do arquivo sem sua extensao: ";
        1:   17-block  0
        1:   18:    cin >> nomeArquivoEntrada;
        1:   18-block  0
        1:   19:    cout << "* Nome do digitado: " << nomeArquivoEntrada << endl;
        1:   19-block  0
        1:   19-block  1
        1:   19-block  2
        1:   20:    cout << "********************************************************************************" << endl;
        1:   20-block  0
        1:   20-block  1
        1:   21:    strcpy(nomeArquivo,nomeArquivoEntrada);
        1:   22:    strcat(nomeArquivoEntrada,".txt");
        -:   23:    //ABERTURA DO ARQUIVO
        1:   24:    cout<<nomeArquivo;
        1:   24-block  0
        1:   25:    arquivo = fopen(nomeArquivoEntrada,"r");
        1:   25-block  0
        -:   26:
        1:   27:    if (arquivo == nullptr){
    #####:   28:        cout << "ERRO NA ABERTURA DO ARQUIVO!"<< endl; //CASO O ARQUIVP NAO ABRA
    $$$$$:   28-block  0
    $$$$$:   28-block  1
    #####:   29:        fclose(arquivo);
    $$$$$:   29-block  0
    #####:   30:        return 0;
        -:   31:    }else{
        1:   32:        cout << "ARQUIVO ABERTO COM SUCESSO!" << endl;
        1:   32-block  0
        1:   32-block  1
        -:   33:
        1:   34:        fscanf(arquivo,"%d",&n); //LEITURA DA QUANTIDADE DE VERTICES
        1:   35:        grafo = new Grafo(n);
        1:   35-block  0
        1:   35-block  1
    %%%%%:   35-block  2
        -:   36:
        1:   37:        cout << "Quantidade de vertices : " << n << endl;
        1:   37-block  0
        1:   37-block  1
        1:   37-block  2
        1:   38:        cout <<"Arestas: " <<endl;
        1:   38-block  0
        1:   38-block  1
      420:   39:        while(!feof(arquivo)){
      420:   39-block  0
      419:   39-block  1
      419:   40:            fscanf(arquivo,"%d %d %f",&aresta1,&aresta2,&peso);
      419:   41:            cout << "\t("<<aresta1<<")=="<<peso<<"==("<<aresta2<<")"<<endl;
      419:   41-block  0
      419:   41-block  1
      419:   41-block  2
      419:   41-block  3
      419:   41-block  4
      419:   41-block  5
      419:   41-block  6
      419:   41-block  7
      419:   42:            grafo->setAresta(aresta1-1,aresta2-1,peso); //A subtração por -1 é para a proveitar o primeiro indice da lista
      419:   42-block  0
      419:   43:            quantidadeArestas++;
        -:   44:        }
        1:   45:        fclose(arquivo);
        1:   45-block  0
        -:   46:    }
        1:   47:    cout<< "Digite o vertice a ser analisado: ";
        1:   48:    cin>>verticeLido;
        1:   48-block  0
        1:   49:    vertice = verticeLido - 1; //Coreção para encontrar os valores certos
        -:   50:
        1:   51:    cout<< "Digite as arestas para analisar: " << endl;
        1:   51-block  0
        1:   51-block  1
        1:   52:    cout<<"Aresta 1: ";
        1:   52-block  0
        1:   53:    cin>>arestaR1Lido;
        1:   53-block  0
        1:   54:    cout<<"Aresta 2:";
        1:   54-block  0
        1:   55:    cin>>arestaR2Lido;
        1:   55-block  0
        1:   56:    arestaR1 = arestaR1Lido - 1;
        1:   57:    arestaR2 = arestaR2Lido - 1;
        -:   58:
        -:   59:    //Variaveis usadas no prrenchimento do arquivo
        1:   60:    ordem = n; // a
        1:   61:    tamanho= quantidadeArestas; //b
        1:   62:    int vizinhosVertice[grafo->getGrau(vertice)];//c
        1:   62-block  0
        1:   63:    grafo->getVizinhos(vertice,vizinhosVertice);//c
        1:   63-block  0
        1:   64:    grau = grafo->getGrau(vertice);//d
        1:   64-block  0
        -:   65:
        1:   66:    int ordemVisitas[n];//e
        1:   67:    grafo->buscaProfundidade(ordemVisitas);
        1:   67-block  0
        1:   68:    ncomponentes = grafo->CompsConexaGrafo();//f
        1:   68-block  0
        -:   69:
        -:   70:
        -:   71:    //Prenche novo arquivo;
        1:   72:    strcpy(nomeArquivoSaida,nomeArquivo);
        1:   73:    strcat(nomeArquivoSaida,"_Saida.txt");
        -:   74:
        1:   75:    arquivo = fopen(nomeArquivoSaida,"w");
        1:   75-block  0
        -:   76:
        1:   77:    fprintf(arquivo,"* Ordem do grafo V(G): %d\n",ordem);
        -:   78:
        1:   79:    fprintf(arquivo,"* Tamanho do grafo E(G): %d\n",tamanho);
        -:   80:
        1:   81:    fprintf(arquivo,"* Vizinhos do vertice V = %d : {",verticeLido);
        7:   82:    for (int i = 0; i < grafo->getGrau(vertice); ++i) {
        7:   82-block  0
        7:   82-block  1
        6:   82-block  2
        6:   83:        fprintf(arquivo," %d ",vizinhosVertice[i]);
        -:   84:    }
        1:   85:    fprintf(arquivo,"}\n");
        -:   86:
        1:   87:    fprintf(arquivo,"* Grau do vertice d(x%d): %d\n",verticeLido,grau);
        -:   88:
        1:   89:    fprintf(arquivo,"* Ordem de visitas em BP : \n");
      101:   90:    for (int i = 0; i < n; ++i) {
        1:   90-block  0
      101:   90-block  1
      100:   90-block  2
      100:   91:        fprintf(arquivo,"    Vertice %d  ordem de acesso: %d \n",i+1,ordemVisitas[i]+1);
        -:   92:    }
        1:   93:    fprintf(arquivo,"\n");
        -:   94:
        1:   95:    fprintf(arquivo,"* Numero de componentes: %d\n",ncomponentes);
        -:   96:
        -:   97:    //grafo->printGrafo();
        1:   98:    if(grafo->verificaSeArestaPonto(ncomponentes,arestaR1,arestaR2)){
        1:   98-block  0
        1:   98-block  1
    #####:   99:        fprintf(arquivo,"* A aresta escolhida eh uma ponte\n");
    $$$$$:   99-block  0
        -:  100:    }else{
        1:  101:        fprintf(arquivo,"* A aresta escolhida nao eh uma ponte\n");
        1:  101-block  0
        -:  102:    }
        -:  103:    //grafo->printGrafo();
        -:  104:
        1:  105:    if (grafo->verificaSeVerticeArticulcao(ncomponentes,vertice)){
        1:  105-block  0
        1:  105-block  1
        1:  106:        fprintf(arquivo,"* O vertice escolhido eh uma articulacao\n");
        1:  106-block  0
        -:  107:    }else{
    #####:  108:        fprintf(arquivo,"* O vertice escolhido nao eh uma articulacao\n");
    $$$$$:  108-block  0
        -:  109:    }
        -:  110:    //grafo->printGrafo();
        -:  111:
        1:  112:    fclose(arquivo);
        1:  112-block  0
        -:  113:
        -:  114:
        1:  115:    return 0;
        1:  115-block  0
        1:  115-block  1
        4:  116:}
        1:  116-block  0
        1:  116-block  1
        1:  116-block  2
        1:  116-block  3
        1:  116-block  4
